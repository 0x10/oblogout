#!/usr/bin/python3.7
import os
import sys
import subprocess
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gio, Gtk, Gdk

# Logout
def exit_openbox():
    subprocess.run(["openbox", "--exit"])

# Reboot
def reboot():
    os.system("sudo shutdown -r now && openbox --exit")

# Shutdown
def shutdown():
    os.system("sudo shutdown -h now && openbox --exit")

class ObLogoutWindow(Gtk.ApplicationWindow):
    def __init__(self, *args, **kwargs ):
        super().__init__(*args, **kwargs)
        self.set_border_width(20)
        self.set_resizable(False)
        self.set_gravity(Gdk.Gravity.CENTER)
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)

        # Setting up the self.grid in which the elements are to be positionned
        self.hbox = Gtk.Box(spacing=10)
        self.add(self.hbox)

        logout_buttons = [ [ "_Cancel", self.on_cancel ],
                           [ "_Log out", self.on_logout ],
                           [ "_Reboot", self.on_reboot ],
                           [ "_Shutdown", self.on_shutdown ] ]

        for button in logout_buttons:
            new_button = Gtk.Button.new_with_mnemonic(button[0])
            new_button.connect("clicked", button[1])
            self.hbox.pack_start(new_button, True, True, 0)

        self.show_all()

    def on_cancel(self, button):
        Gtk.main_quit()

    def on_logout(self, button):
        exit_openbox()

    def on_reboot(self, button):
        reboot()

    def on_shutdown(self, button):
        shutdown()


class Application(Gtk.Application):
    def __init__(self, *args, **kwargs):
        super().__init__(
            *args,
            application_id="org.openbox.oblogout",
            flags=Gio.ApplicationFlags.NON_UNIQUE,
            **kwargs
        )
        self.window = None

    def do_startup(self):
        Gtk.Application.do_startup(self)

    def do_activate(self):
        # We only allow a single window and raise any existing ones
        if not self.window:
            # Windows are associated with the application
            # when the last one is closed the application shuts down
            self.window = ObLogoutWindow(
                application=self,
                title="Openbox Logout")

        self.window.present()

    def on_quit(self, action, param):
        if self.window.do_delete_event(None) != True:
            self.quit()


if __name__ == "__main__":
    app = Application()
    app.run(sys.argv)
